*ethersync.txt*  Editor-agnostic collaborative editing                 *ethersync*

This plugin adds real-time collaborative editing functionality to Neovim.
You can use it for pair programming or note-taking, for example. It is mainly
meant to be used with Ethersync, but can also be configured to work with other
collaborative software speaking the same protocol.

==============================================================================
INSTALLATION                                            *ethersync-installation*

See main README at |https://github.com/ethersync/ethersync-nvim|.

==============================================================================
CONFIGURATION                                          *ethersync-configuration*

This plugin allows you to configure multiple collaboration servers.
A configuration for connecting to Ethersync daemons is provided and enabled by
default.

config({name}, {cfg})                                       *ethersync.config()*
    Set or update the configuration for a client.

    Examples:
    • Attempt to connect Ethersync in directories that have a `.ethersync`
      directory (this is configured by default): >lua
        ethersync.config("ethersync", {
            cmd = { "ethersync", "client" },
            root_markers = ".ethersync",
        })
<
    • Use the `ethersync-http` command to sync buffers that are https URLs. The
      directory name might not be important: >lua
        ethersync.config("http", {
            cmd = { "ethersync-http" },
            root_dir = function(bufnr, on_dir)
                local name = vim.api.nvim_buf_get_name(bufnr)
                if string.find(name, "https://") == 1 then
                    on_dir("/tmp")
                end
            end,
        })
<

    Parameters: ~
      • {name}  (`string`)
      • {cfg}   A configuration (see |ethersync.Config|)

enable({name}, {enable})                                    *ethersync.enable()*
    Connects to the collaboration server when a buffer is opened, based on the
    `root_markers` and `root_dir` fields of the configuration.

    The `"ethersync"` configuration is enabled by default.

    Examples: >lua
        ethersync.enable('ethersync-http')
        ethersync.disable('ethersync')
<

    Parameters: ~
      • {name}    (`string`) Name of the client to enable.
      • {enable}  (`boolean`) `true|nil` to enable, `false` to disable.

*ethersync.Config*
    Inspired by |vim.lsp.Config|, but with fewer options.

    Fields: ~
      • {cmd}            (`string[]`) Command to start the collaboration server.
      • {root_markers}?  (`string`) Filename used to find the root of the
                         collaborative project. The plugin will search upwards
                         (from the buffer file), and stop in the first
                         directory with that marker. Typical values might be
                         `'.git'` or `'.ethersync'`. Unused if `root_dir` is
                         defined.
      • {root_dir}?      (`fun(bufnr: integer, on_dir:fun(root_dir?:string))`)
                         Called to decide the root of the collaborative
                         project. The provided function must call `on_dir`
                         with the root directory if the configuration should
                         be activated. You can use this function to
                         conditionally activate (or skip) collaboration. See
                         example at `ethersync.config` for an example.

==============================================================================
USAGE                                                          *ethersync-usage*

:EthersyncInfo                                                  *:EthersyncInfo*
    Shows the active collaboration clients and cursor positions.

:EthersyncJumpToCursor                                  *:EthersyncJumpToCursor*
    Jumps to the cursor of another peer. If multiple cursors are present,
    gives you a selection menu.

    Tip: Create an easily accessible mapping for this command!

:EthersyncFollow                                              *:EthersyncFollow*
    Follows another peer, keeping their cursor in view. If multiple cursors
    are present, gives you a selection menu.

:EthersyncUnfollow                                          *:EthersyncUnfollow*
    Stops following another peer.

 vim:tw=78:ts=8:sw=4:sts=4:et:ft=help:norl:
